#!/usr/bin/env python3

import sys
import argparse
from bench_executor import Executor

VERSION = '0.1.0'
EXIT_CODE_UNKNOWN_COMMAND = -1
EXIT_CODE_NO_CASES = -2
EXIT_CODE_FAILED_CASE = -3

def print_cases(executor: Executor):
    cases = e.list()

    if not cases:
        print('No cases discovered!')
        sys.exit(EXIT_CODE_NO_CASES)

    print(f'Discovering {len(cases)} cases:')
    for index, case in enumerate(cases):
        name = case['data']['name']
        number_of_steps = f'[ {len(case["data"]["steps"])} steps ]'
        print(f'{index+1 : >4}. {name : <65} {number_of_steps: >11}')

def execute_cases(executor: Executor, fail_fast: bool = False):
    failures = []
    cases = e.list()

    if not cases:
        print('No cases discovered!')
        sys.exit(EXIT_CODE_NO_CASES)

    print(f'Executing {len(cases)} cases:')
    for index, case in enumerate(cases):
        data = case['data']
        p = int(100.0 * (index + 1)/len(cases))
        percentage = f'[ {p : >3}% ]'

        print(f'{index+1 : >4}. {data["name"] : <67} {percentage : <9}')
        success, diff = e.run(case)

        if not success:
            failures.append(data['name'])
            if fail_fast:
                break

    # Exit with error code when we have a failed case
    if failures:
        print(f'{len(failures)}/{len(cases)} cases failed to execute:',
              file=sys.stderr)
        for index, f in enumerate(failures):
            print(f'{index+1 : >4}. {f : <76}')
        sys.exit(EXIT_CODE_FAILED_CASE)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Copyright by (c) Dylan Van Assche (2022), available under GPLv3 license',
                                     epilog='Please cite our paper if you make use of this tool')
    parser.add_argument('--version', action='version',
                        version=f'{parser.prog} {VERSION}')
    parser.add_argument(dest='command',
                        help='Command to execute, available commands: "list", "run"',
                        type=str)
    parser.add_argument('-r', '--root', dest='main_directory', default='.',
                        help='Root directory of all cases to execute, defaults to the current working directory',
                        type=str)
    parser.add_argument('--verbose', dest='verbose',
                        help='Turn on verbose output', action='store_true')
    parser.add_argument('--fail-fast', dest='fail_fast',
                        help='Immediately exit when a case fails', action='store_true')
    args = parser.parse_args()

    if args.verbose:
        print(f'{parser.prog} {VERSION}')
        print(f'Command: {args.command}')
        print(f'Root directory: {args.main_directory}')
        print(f'Verbose enabled: {args.verbose}')
        print(f'Fail fast enabled: {args.fail_fast}')

    e = Executor(args.main_directory, verbose=args.verbose, cli=True)

    if args.command == 'list':
        print_cases(e)
    elif args.command == 'run':
        execute_cases(e, args.fail_fast)
    else:
        print(f'Unknown command: {args.command}', file=sys.stderr)
        sys.exit(EXIT_CODE_UNKNOWN_COMMAND)
