#!/usr/bin/env python3

import os
import unittest
import requests
import warnings
import psycopg2
import pymysql
from container import Container
from rmlmapper import RMLMapper
from postgresql import PostgreSQL
from mysql import MySQL
from virtuoso import Virtuoso
from morphkgc import MorphKGC
from sdmrdfizer import SDMRDFizer
from query import Query
from time import sleep
from rdflib import Graph

DATA_DIR = os.path.join(os.getcwd(), 'data')

class Tests(unittest.TestCase):
    def setUp(self):
        warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)

    def test_docker_run(self):
        c = Container('nginx:alpine', 'test_docker_run', {'80/tcp': '8080/tcp'})
        c.run()
        sleep(5)
        r = requests.get('http://localhost:8080')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()
        c.stop()

    def test_docker_run_and_wait_for_log(self):
        c = Container('nginx:alpine', 'test_docker_run_and_wait_for_log',
                      {'80/tcp': '8081/tcp'})
        c.run_and_wait_for_log('start worker process')
        r = requests.get('http://localhost:8081')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()
        c.stop()

    def test_rmlmapper_file(self):
        rmlmapper = RMLMapper(DATA_DIR)
        rmlmapper.execute_mapping('/data/mapping.rml.ttl', '/data/out.nt', 'ntriples')
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'rmlmapper', 'out.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'rmlmapper', 'out.nt'), format='ntriples')
        self.assertEqual(len(g), 3)
        rmlmapper.stop()

    def test_morphkgc_file(self):
        morphkgc = MorphKGC(DATA_DIR)
        morphkgc.execute_mapping('/data/mapping.rml.ttl','/data/out.nt', 'ntriples')
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'morphkgc', 'out.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'morphkgc', 'out.nt'), format='ntriples')
        self.assertEqual(len(g), 3)
        morphkgc.stop()

    def test_sdmrdfizer_file(self):
        sdmrdfizer = SDMRDFizer(DATA_DIR)
        sdmrdfizer.execute_mapping('/data/mapping.rml.ttl','/data/out.nt', 'ntriples')
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'sdmrdfizer', 'out.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'sdmrdfizer', 'out.nt'), format='ntriples')
        self.assertEqual(len(g), 3)
        sdmrdfizer.stop()

    def test_postgresql(self):
        postgresql = PostgreSQL(DATA_DIR)
        postgresql.wait_until_ready()
        connection = psycopg2.connect(host='localhost', database='db',
                                      user='root', password='root')
        cursor = connection.cursor()

        # Test valid query
        cursor.execute('SELECT 1;')

        # Test invalid query
        with self.assertRaises(psycopg2.errors.UndefinedTable):
            cursor.execute('SELECT * FROM INVALID_TABLE;')

        connection.close()
        postgresql.stop()

    def test_mysql(self):
        mysql = MySQL(DATA_DIR)
        mysql.wait_until_ready()
        connection = pymysql.connect(host='localhost', user='root',
                                     password='root', db='db')
        cursor = connection.cursor()

        # Test valid query
        cursor.execute('SELECT 1;')

        # Test invalid query
        with self.assertRaises(pymysql.err.ProgrammingError):
            cursor.execute('SELECT * FROM INVALID_TABLE;')

        connection.close()
        mysql.stop()

    def test_virtuoso(self):
        virtuoso = Virtuoso(DATA_DIR)
        virtuoso.wait_until_ready()

        # Check if web interface is up
        r = requests.get('http://localhost:8890')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()

        # Check if SPARQL endpoint works
        r = requests.get('http://localhost:8890/sparql/?default-graph-uri=&query=CONSTRUCT+WHERE+%7B%0D%0A++%3Fs+%3Fp+%3Fo.%0D%0A%7D%0D%0ALIMIT+100&format=text%2Fplain')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()

        # Check if iSQL is up, HTTP is unsupported on the iSQL port
        # so the connection will be closed without a response
        with self.assertRaises(requests.exceptions.ConnectionError) as e:
            r = requests.get('http://localhost:1111')
            r.raise_for_status()
        self.assertTrue('Connection aborted' in str(e.exception))

        virtuoso.stop()

    def test_query(self):
        virtuoso = Virtuoso(DATA_DIR)
        virtuoso.wait_until_ready()
        q = Query('CONSTRUCT WHERE { ?s ?p ?o. } LIMIT 100')
        results = list(filter(None, q.execute(virtuoso.endpoint).split('\n')))
        self.assertTrue(len(results) == 100)
        virtuoso.stop()

if __name__ == '__main__':
    unittest.main()
