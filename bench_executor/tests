#!/usr/bin/env python3

import os
import unittest
import requests
import warnings
from container import Container
from rmlmapper import RMLMapper
from postgresql import PostgreSQL
from time import sleep
from rdflib import Graph

class Tests(unittest.TestCase):
    def setUp(self):
        warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)

    def test_docker_run(self):
        c = Container('nginx:alpine', 'test_docker_run', {'80/tcp': '8080/tcp'})
        c.run()
        sleep(5)
        r = requests.get('http://localhost:8080')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()
        c.stop()

    def test_docker_run_and_wait_for_log(self):
        c = Container('nginx:alpine', 'test_docker_run_and_wait_for_log',
                      {'80/tcp': '8081/tcp'})
        c.run_and_wait_for_log('start worker process')
        r = requests.get('http://localhost:8081')
        self.assertEqual(r.status_code, 200)
        r.raise_for_status()
        c.stop()

    def test_rmlmapper(self):
        rmlmapper = RMLMapper(os.path.join(os.getcwd(), 'data', 'rmlmapper'))
        rmlmapper.execute(['-m', '/data/mapping.rml.ttl', '-s', 'nquads',
                           '-o', '/data/out.nq'])
        self.assertTrue(os.path.exists('data/out.nq'))
        g = Graph()
        g.parse('data/out.nq', format='nquads')
        self.assertEqual(len(g), 3)
        rmlmapper.stop()

    def test_postgresql(self):
        postgresql = PostgreSQL(os.path.join(os.getcwd(), 'data', 'postgresql'))
        postgresql.run_and_wait_for_log('port 5432')
        postgresql.stop()


if __name__ == '__main__':
    unittest.main()
