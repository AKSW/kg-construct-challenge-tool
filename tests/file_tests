#!/usr/bin/env python3

import os
import sys
import atexit
import unittest
import subprocess
from glob import glob
from rdflib import Graph
sys.path.append('../')
from bench_executor.rmlmapper import RMLMapper  # noqa: E402
from bench_executor.morphkgc import MorphKGC  # noqa: E402
from bench_executor.sdmrdfizer import SDMRDFizer  # noqa: E402
from bench_executor.container import ContainerManager  # noqa: E402

LOG_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                       'log')
DATA_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                        'data')
CONFIG_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                          'config')

manager = ContainerManager()


@atexit.register
def clean():
    if len(manager.list_all()) > 0:
        print('Stopping all containers before exiting...')
        manager.stop_all()

    for f in glob(f'{os.path.join(DATA_DIR, "shared")}/*'):
        # Keep original data and mappings
        if 'student' in f or 'mapping' in f or f.endswith('.q') \
           or f.endswith('.sql'):
            continue
        os.remove(f)


class FileTests(unittest.TestCase):
    @classmethod
    def tearDownClass(self):
        manager.stop_all()

    def test_rmlmapper_file(self):
        rmlmapper = RMLMapper(DATA_DIR, CONFIG_DIR, LOG_DIR, False)
        try:
            os.remove(os.path.join(DATA_DIR, 'shared', 'rmlmapper_file.nt'))
        except FileNotFoundError:
            pass
        self.assertTrue(rmlmapper.execute_mapping('mapping.rml.ttl',
                                                  'rmlmapper_file.nt',
                                                  'ntriples'))
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'shared',
                                                    'rmlmapper_file.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'shared', 'rmlmapper_file.nt'),
                format='ntriples')
        # 3 triples and 1 mapped as NULL <predicate> NULL because NULL values
        # are undefined in CSV.
        self.assertEqual(len(g), 4)
        rmlmapper.stop()

    def test_morphkgc_file(self):
        morphkgc = MorphKGC(DATA_DIR, CONFIG_DIR, LOG_DIR, False)
        try:
            os.remove(os.path.join(DATA_DIR, 'morphkgc', 'shared',
                                   'morphkgc_file.nt'))
        except FileNotFoundError:
            pass
        self.assertTrue(morphkgc.execute_mapping('mapping.rml.ttl',
                                                 'morphkgc_file.nt',
                                                 'ntriples'))
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'shared',
                                                    'morphkgc_file.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'shared', 'morphkgc_file.nt'),
                format='ntriples')
        self.assertEqual(len(g), 3)
        morphkgc.stop()

    def test_sdmrdfizer_file(self):
        sdmrdfizer = SDMRDFizer(DATA_DIR, CONFIG_DIR, LOG_DIR, False)
        try:
            os.remove(os.path.join(DATA_DIR, 'shared', 'sdmrdfizer_file.nt'))
        except FileNotFoundError:
            pass
        self.assertTrue(sdmrdfizer.execute_mapping('mapping.rml.ttl',
                                                   'sdmrdfizer_file.nt',
                                                   'ntriples'))
        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'shared',
                                                    'sdmrdfizer_file.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'shared',
                             'sdmrdfizer_file.nt'), format='ntriples')
        self.assertEqual(len(g), 3)
        sdmrdfizer.stop()


if __name__ == '__main__':
    # SELinux causes weird permission denied issues, warn users
    try:
        response = subprocess.check_output('getenforce')
        if response.decode().strip() != 'Permissive':
            print('SELinux must be set to "permissive" to allow containers '
                  'accessing files in mounted directories', file=sys.stderr)
            sys.exit(-1)
    except subprocess.CalledProcessError:
        pass
    except FileNotFoundError:
        pass

    if len(manager.list_all()) != 0:
        print('Stopping all containers before starting tests...')
        manager.stop_all()

    unittest.main()
