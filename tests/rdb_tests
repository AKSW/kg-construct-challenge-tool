#!/usr/bin/env python3

import os
import sys
import unittest
import subprocess
from rdflib import Graph
sys.path.append('../')
from bench_executor.container import ContainerManager  # noqa: E402
from bench_executor.mysql import MySQL  # noqa: E402
from bench_executor.rmlmapper import RMLMapper  # noqa: E402
from bench_executor.query import Query  # noqa: E402

LOG_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                       'log')
DATA_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                        'data')
CONFIG_DIR = os.path.join(os.path.dirname(__file__), '..', 'bench_executor',
                          'config')


class RDBTests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls._mysql = MySQL(DATA_DIR, CONFIG_DIR, LOG_DIR, False)
        cls._mysql.wait_until_ready()
        cls._mysql.load('student.csv', 'student')

    @classmethod
    def tearDownClass(cls):
        cls._mysql.stop()

    def test_rmlmapper_mysql(self):
        rmlmapper = RMLMapper(DATA_DIR, CONFIG_DIR, LOG_DIR, True)
        try:
            os.remove(os.path.join(DATA_DIR, 'shared', 'rmlmapper_mysql.nt'))
        except FileNotFoundError:
            pass
        self.assertTrue(rmlmapper.execute_mapping('mapping.r2rml.ttl',
                                                  'rmlmapper_mysql.nt',
                                                  'ntriples', 'root', 'root',
                                                  'MySQL', '3306', 'db',
                                                  'MySQL'))

        self.assertTrue(os.path.exists(os.path.join(DATA_DIR, 'shared',
                                                    'rmlmapper_mysql.nt')))
        g = Graph()
        g.parse(os.path.join(DATA_DIR, 'shared', 'rmlmapper_mysql.nt'),
                format='ntriples')
        self.assertEqual(len(g), 3)

        rmlmapper.stop()


if __name__ == '__main__':
    # SELinux causes weird permission denied issues, warn users
    try:
        response = subprocess.check_output('getenforce')
        if response.decode().strip() != 'Permissive':
            print('SELinux must be set to "permissive" to allow containers '
                  'accessing files in mounted directories', file=sys.stderr)
            sys.exit(-1)
    except subprocess.CalledProcessError:
        pass
    except FileNotFoundError:
        pass

    unittest.main()
